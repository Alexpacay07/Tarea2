class Node:
    """Clase auxiliar para representar un nodo en la cola."""
    def _init_(self, data):
        self.data = data
        self.next = None

class Queue:
    """Implementación de una cola (FIFO) sin estructuras predefinidas."""
    def _init_(self):
        self.front_node = None
        self.rear_node = None
        self._size = 0

    def enqueue(self, element):
        """Agrega un elemento al final de la cola."""
        new_node = Node(element)
        if self.rear_node:
            self.rear_node.next = new_node
        self.rear_node = new_node
        if not self.front_node:
            self.front_node = new_node
        self._size += 1

    def dequeue(self):
        """Elimina y devuelve el primer elemento de la cola."""
        if self.is_empty():
            raise Exception("La cola está vacía")
        removed_data = self.front_node.data
        self.front_node = self.front_node.next
        if not self.front_node:
            self.rear_node = None
        self._size -= 1
        return removed_data

    def front(self):
        """Devuelve el primer elemento sin eliminarlo."""
        if self.is_empty():
            raise Exception("La cola está vacía")
        return self.front_node.data

    def is_empty(self):
        """Retorna True si la cola está vacía, False en caso contrario."""
        return self._size == 0

    def size(self):
        """Retorna el número de elementos en la cola."""
        return self._size

class TaskManager:
    """Gestor de tareas con colas de prioridad."""
    def _init_(self):
        self.high_priority_queue = Queue()  # Cola de alta prioridad
        self.normal_priority_queue = Queue()  # Cola normal

    def add_task(self, task, priority="normal"):
        """Agrega una tarea a la cola correspondiente según la prioridad."""
        if priority.lower() == "alta":
            self.high_priority_queue.enqueue(task)
        else:
            self.normal_priority_queue.enqueue(task)

    def process_task(self):
        """Procesa la siguiente tarea según prioridad."""
        if not self.high_priority_queue.is_empty():
            return f"Tarea procesada: {self.high_priority_queue.dequeue()} (Alta prioridad)"
        elif not self.normal_priority_queue.is_empty():
            return f"Tarea procesada: {self.normal_priority_queue.dequeue()} (Normal)"
        else:
            return "No hay tareas pendientes."

    def show_pending_tasks(self):
        """Muestra la cantidad de tareas pendientes en cada cola."""
        return {
            "Alta prioridad": self.high_priority_queue.size(),
            "Normal": self.normal_priority_queue.size()
        }

class CustomerService:
    """Simulación de un sistema de atención al cliente con prioridad."""
    def __init__(self):
        self.vip_queue = Queue()  # Cola VIP
        self.regular_queue = Queue()  # Cola Regular

    def add_customer(self, customer, type="Regular"):
        """Agrega un cliente a la cola según su tipo."""
        if type.lower() == "vip":
            self.vip_queue.enqueue(customer)
        else:
            self.regular_queue.enqueue(customer)

    def attend_customer(self):
        """Atiende al siguiente cliente según prioridad."""
        if not self.vip_queue.is_empty():
            return f"Atendiendo cliente VIP: {self.vip_queue.dequeue()}"
        elif not self.regular_queue.is_empty():
            return f"Atendiendo cliente Regular: {self.regular_queue.dequeue()}"
        else:
            return "No hay clientes en espera."

    def show_waiting_customers(self):
        """Muestra la cantidad de clientes en espera en cada cola."""
        return {
            "VIP": self.vip_queue.size(),
            "Regular": self.regular_queue.size()
        }

if __name__== "__main__":
    while True:
        print("\nMenú Principal:")
        print("1. Gestor de Tareas")
        print("2. Sistema de Atención al Cliente")
        print("3. Salir")
        opcion = input("Seleccione una opción: ")

        if opcion == "1":
            task_manager = TaskManager()
            while True:
                print("\nGestor de Tareas:")
                print("1. Agregar tarea")
                print("2. Procesar tarea")
                print("3. Ver tareas pendientes")
                print("4. Volver al menú principal")
                sub_opcion = input("Seleccione una opción: ")

                if sub_opcion == "1":
                    tarea = input("Ingrese la tarea: ")
                    prioridad = input("Ingrese la prioridad (alta/normal): ").strip().lower()
                    task_manager.add_task(tarea, prioridad)
                elif sub_opcion == "2":
                    print(task_manager.process_task())
                elif sub_opcion == "3":
                    print(task_manager.show_pending_tasks())
                elif sub_opcion == "4":
                    break
                else:
                    print("Opción no válida. Intente de nuevo.")

        elif opcion == "2":
            service = CustomerService()
            while True:
                print("\nSistema de Atención al Cliente:")
                print("1. Agregar cliente")
                print("2. Atender cliente")
                print("3. Ver clientes en espera")
                print("4. Volver al menú principal")
                sub_opcion = input("Seleccione una opción: ")

                if sub_opcion == "1":
                    cliente = input("Ingrese el nombre del cliente: ")
                    tipo = input("Ingrese el tipo (VIP/Regular): ").strip().lower()
                    service.add_customer(cliente, tipo)
                elif sub_opcion == "2":
                    print(service.attend_customer())
                elif sub_opcion == "3":
                    print(service.show_waiting_customers())
                elif sub_opcion == "4":
                    break
                else:
                    print("Opción no válida. Intente de nuevo.")

        elif opcion == "3":
            print("Saliendo del programa...")
            break
        else:
            print("Opción no válida. Intente de nuevo.")
